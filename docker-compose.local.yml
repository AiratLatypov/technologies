volumes:
#  zookeeper-data:
#    driver: local
#  zookeeper-log:
#    driver: local
#  kafka-data:
#    driver: local
  db-volume:
    name: technologies-postgres
  clickhouse-data:
    name: technologies-clickhouse-data
  clickhouse-config:
    name: technologies-clickhouse-config
  mongo_data:
    name: technologies-mongo


services:

#  app:
#    container_name: fastapi-app
#    ports:
#      - "8000:8000"
#    expose:
#      - 8000
#    build:
#      context: .
#      dockerfile: deployment/local/Dockerfile
#      target: dev
#    env_file:
#      - .env
#    depends_on:
#      test-db:
#        condition: service_healthy

  postgres:
    container_name: postgres-tech
    image: postgres:latest
    restart: on-failure
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - db-volume:/var/lib/postgresql/data

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse-tech
    environment:
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - CLICKHOUSE_DB=${CLICKHOUSE_DB}
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - clickhouse-config:/etc/clickhouse-server
    ports:
      - "${CLICKHOUSE_HTTP_PORT}:${CLICKHOUSE_HTTP_PORT}"
      - "${CLICKHOUSE_TCP_PORT}:${CLICKHOUSE_TCP_PORT}"
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: [ "CMD", "clickhouse-client", "--query", "SELECT 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:latest
    container_name: mongo-tech
    restart: always
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db

#  akhq:
#    image: tchiotludo/akhq
#    restart: always
#    environment:
#      AKHQ_CONFIGURATION: |
#        akhq:
#          connections:
#            docker-kafka-server:
#              properties:
#                bootstrap.servers: "kafka:9094"
#              schema-registry:
#                url: "http://schema-registry:8085"
#    ports:
#      - 8080:8080
#    links:
#      - kafka
#      - schema-registry
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper
#    restart: always
#    volumes:
#      - zookeeper-data:/var/lib/zookeeper/data:Z
#      - zookeeper-log:/var/lib/zookeeper/log:Z
#    environment:
#      - deployment/.env.zookeeper
#    ports:
#      - 2181:2181
#
#  kafka:
#    image: confluentinc/cp-kafka
#    restart: always
#    volumes:
#      - kafka-data:/var/lib/kafka/data:Z
#    environment:
#      - deployment/.env.kafka
#    links:
#      - zookeeper
#    ports:
#      - 9092:9092

#  schema-registry:
#    image: confluentinc/cp-schema-registry
#    restart: always
#    depends_on:
#      - kafka
#    environment:
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9094"
#      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
#      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
#      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: "INFO"
#    ports:
#      - 8083:8085
